{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["setHours","time","hours","Math","trunc","setMinutes","minutes","setSeconds","seconds","App","useState","status","setStatus","setTime","useEffect","unsubscribe$","Subject","timer$","interval","click$","fromEvent","document","doubleClick$","pipe","buffer","debounceTime","map","list","length","filter","x","takeUntil","subscribe","next","val","complete","console","log","className","onClick","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gNAAe,I,4ECMTA,EAAW,SAACC,GAChB,IAAMC,EAAQC,KAAKC,MAAMH,EAAO,MAChC,OAAIC,EAAQ,GACJ,IAAN,OAAWA,GAENA,GAGHG,EAAa,SAACJ,GAClB,IAAMK,EAAUH,KAAKC,OAAOH,EAAO,KAAOE,KAAKC,MAAMH,EAAO,OAAS,IACrE,OAAIK,EAAU,GACN,IAAN,OAAWA,GAENA,GAEHC,EAAa,SAACN,GAClB,IAAMO,EACJP,EAAkE,GAA3DE,KAAKC,OAAOH,EAAO,KAAOE,KAAKC,MAAMH,EAAO,OAAS,IAC9D,OAAIO,EAAU,GACN,IAAN,OAAWA,GAENA,GAsFMC,EAnFH,WACV,MAA4BC,mBAAS,QAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAS,GAAjC,mBAAOT,EAAP,KAAaY,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IACnBC,EAASC,YAAS,KAClBC,EAASC,YAAUC,SAAU,SAE7BC,EAAeH,EAAOI,KAC1BC,YAAOL,EAAOI,KAAKE,YAAa,OAChCC,aAAI,SAACC,GACH,OAAOA,EAAKC,UAEdC,aAAO,SAACC,GAAD,OAAa,IAANA,MAahB,MAXe,UAAXnB,GACFM,EAAOM,KAAKQ,YAAUhB,GAAegB,YAAUT,IAAeU,UAAU,CACtEC,KAAM,WACJpB,GAAQ,SAACqB,GAAD,OAASA,EAAM,MAEzBC,SAAU,WACRvB,EAAU,WAKT,WACLG,EAAakB,OACblB,EAAaoB,cAEd,CAACxB,IAiBJ,OADAyB,QAAQC,IAAIpC,GAEV,sBAAKqC,UAAW,MAAhB,UACE,wCAAStC,EAASC,GAAlB,YAA2BI,EAAWJ,GAAtC,YAA+CM,EAAWN,MAC1D,wBACEsC,QAAS,WAlBE,UAAX5B,GACFC,EAAU,UAgBV,mBAOA,wBACE2B,QAAS,WAnBb3B,EAAU,QACVC,EAAQ,IAiBN,kBAOA,wBACE0B,QAAS,WAtBb1B,EAAQ,IAqBN,mBAOA,wBACE0B,QAAS,SAACC,KADZ,sBC1FSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,M","file":"static/js/main.9ad34942.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { fromEvent, interval, Observable, Subject } from \"rxjs\";\nimport { buffer, debounceTime, filter, map, takeUntil } from \"rxjs/operators\";\n\nconst setHours = (time) => {\n  const hours = Math.trunc(time / 3600);\n  if (hours < 10) {\n    return `0${hours}`;\n  }\n  return hours;\n};\n\nconst setMinutes = (time) => {\n  const minutes = Math.trunc((time - 3600 * Math.trunc(time / 3600)) / 60);\n  if (minutes < 10) {\n    return `0${minutes}`;\n  }\n  return minutes;\n};\nconst setSeconds = (time) => {\n  const seconds =\n    time - Math.trunc((time - 3600 * Math.trunc(time / 3600)) / 60) * 60;\n  if (seconds < 10) {\n    return `0${seconds}`;\n  }\n  return seconds;\n};\n\nconst App = () => {\n  const [status, setStatus] = useState(\"stop\");\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    const timer$ = interval(1000);\n    const click$ = fromEvent(document, \"click\");\n\n    const doubleClick$ = click$.pipe(\n      buffer(click$.pipe(debounceTime(300))),\n      map((list) => {\n        return list.length;\n      }),\n      filter((x) => x === 2)\n    );\n    if (status === \"start\") {\n      timer$.pipe(takeUntil(unsubscribe$), takeUntil(doubleClick$)).subscribe({\n        next: () => {\n          setTime((val) => val + 1);\n        },\n        complete: () => {\n          setStatus(\"stop\");\n        },\n      });\n    }\n\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [status]);\n\n  const start = () => {\n    if (status !== \"start\") {\n      setStatus(\"start\");\n    }\n  };\n\n  const stop = () => {\n    setStatus(\"stop\");\n    setTime(0);\n  };\n  const reset = () => {\n    setTime(0);\n  };\n  const wait = () => {};\n  console.log(time);\n  return (\n    <div className={\"App\"}>\n      <div>{`${setHours(time)}:${setMinutes(time)}:${setSeconds(time)}`}</div>\n      <button\n        onClick={() => {\n          start();\n        }}\n      >\n        start\n      </button>\n      <button\n        onClick={() => {\n          stop();\n        }}\n      >\n        stop\n      </button>\n      <button\n        onClick={() => {\n          reset();\n        }}\n      >\n        reset\n      </button>\n      <button\n        onClick={(e) => {\n          wait();\n        }}\n      >\n        wait\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}